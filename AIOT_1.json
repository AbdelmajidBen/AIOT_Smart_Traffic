[
    {
        "id": "bb5635d13d964c64",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1",
        "type": "http in",
        "z": "bb5635d13d964c64",
        "name": "Trigger Traffic Control",
        "url": "/control-traffic",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 340,
        "y": 120,
        "wires": [
            [
                "2"
            ]
        ]
    },
    {
        "id": "2",
        "type": "image",
        "z": "bb5635d13d964c64",
        "name": "Capture CCTV Image",
        "outputs": 1,
        "x": 540,
        "y": 180,
        "wires": [
            [
                "da3fb695fcc37bb1"
            ]
        ]
    },
    {
        "id": "4",
        "type": "function",
        "z": "bb5635d13d964c64",
        "name": "Traffic Analysis",
        "func": "let vehicleCount = msg.payload.objects.filter(obj => obj.class === 'car').length;\nlet pedestrianCount = msg.payload.objects.filter(obj => obj.class === 'person').length;\nlet animalCount = msg.payload.objects.filter(obj => obj.class === 'animal').length;\nlet trafficStatus;\n\nif (vehicleCount > 10) {\n    trafficStatus = \"heavy_traffic\";\n} else if (vehicleCount > 0) {\n    trafficStatus = \"moderate_traffic\";\n} else {\n    trafficStatus = \"light_traffic\";\n}\n\nmsg.payload = {\n    trafficStatus: trafficStatus,\n    vehicleCount: vehicleCount,\n    pedestrianCount: pedestrianCount,\n    animalCount: animalCount\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 940,
        "y": 260,
        "wires": [
            [
                "5",
                "6",
                "7",
                "8",
                "9",
                "19",
                "29",
                "25"
            ]
        ]
    },
    {
        "id": "5",
        "type": "function",
        "z": "bb5635d13d964c64",
        "name": "Traffic Control Decision",
        "func": "let trafficStatus = msg.payload.trafficStatus;\nlet vehicleCount = msg.payload.vehicleCount;\nlet command;\n\nif (trafficStatus === \"heavy_traffic\") {\n    if (vehicleCount > 15) {\n        command = \"green\"; // Change to green if heavy traffic with many vehicles\n    } else {\n        command = \"red\"; // Keep red if heavy traffic with fewer vehicles\n    }\n} else {\n    command = \"green\"; // Change to green for moderate or light traffic\n}\n\nmsg.payload = {\n    command: command\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1190,
        "y": 60,
        "wires": [
            [
                "10",
                "11",
                "13"
            ]
        ]
    },
    {
        "id": "6",
        "type": "function",
        "z": "bb5635d13d964c64",
        "name": "Pedestrian Safety",
        "func": "let pedestrianCount = msg.payload.pedestrianCount;\nlet alertMessage;\n\nif (pedestrianCount > 5) {\n    alertMessage = \"High pedestrian activity detected. Exercise caution!\";\n} else {\n    alertMessage = \"Normal pedestrian activity.\";\n}\n\nmsg.payload = {\n    alertMessage: alertMessage\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1210,
        "y": 140,
        "wires": [
            [
                "10",
                "8"
            ]
        ]
    },
    {
        "id": "7",
        "type": "function",
        "z": "bb5635d13d964c64",
        "name": "Animal Presence Detection",
        "func": "let animalCount = msg.payload.animalCount;\nlet alertMessage;\n\nif (animalCount > 0) {\n    alertMessage = `Animals (${animalCount}) detected on the road!`;\n} else {\n    alertMessage = \"No animals detected.\";\n}\n\nmsg.payload = {\n    alertMessage: alertMessage\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1220,
        "y": 360,
        "wires": [
            [
                "10"
            ]
        ]
    },
    {
        "id": "8",
        "type": "function",
        "z": "bb5635d13d964c64",
        "name": "Emergency Event Detection",
        "func": "let emergencyEvent = msg.payload.objects.some(obj => ['accident', 'fire', 'emergency_vehicle'].includes(obj.class));\n\nif (emergencyEvent) {\n    return { payload: \"Emergency event detected!\" };\n} else {\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1240,
        "y": 220,
        "wires": [
            [
                "10"
            ]
        ]
    },
    {
        "id": "9",
        "type": "function",
        "z": "bb5635d13d964c64",
        "name": "Event Detection",
        "func": "let eventDetected = false;\n\n// Simulate event detection based on current date/time or other conditions\nlet currentDate = new Date();\nlet month = currentDate.getMonth() + 1;\n\nif (month === 12) {\n    eventDetected = \"Winter festival detected!\";\n} else if (month === 8) {\n    eventDetected = \"Summer festival detected!\";\n}\n\nif (eventDetected) {\n    return { payload: eventDetected };\n} else {\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1200,
        "y": 300,
        "wires": [
            [
                "10",
                "16"
            ]
        ]
    },
    {
        "id": "10",
        "type": "http request",
        "z": "bb5635d13d964c64",
        "name": "Notify Control Center",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://control-center/api/notify",
        "tls": "",
        "x": 1720,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "11",
        "type": "function",
        "z": "bb5635d13d964c64",
        "name": "Weather Condition Analysis",
        "func": "let weatherCondition = msg.payload.weather;\nlet alertMessage;\n\nif (weatherCondition === 'winter') {\n    alertMessage = \"Winter weather condition detected. Adjust traffic management accordingly.\";\n} else if (weatherCondition === 'hot') {\n    alertMessage = \"Hot weather condition detected. Take necessary precautions.\";\n} else {\n    alertMessage = \"Normal weather condition.\";\n}\n\nmsg.payload = {\n    alertMessage: alertMessage\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1540,
        "y": 80,
        "wires": [
            [
                "12",
                "18"
            ]
        ]
    },
    {
        "id": "12",
        "type": "http request",
        "z": "bb5635d13d964c64",
        "name": "Adjust Traffic Management",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://traffic-management/api/adjust",
        "tls": "",
        "x": 2080,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "13",
        "type": "function",
        "z": "bb5635d13d964c64",
        "name": "Accident Detection",
        "func": "let accidentDetected = msg.payload.objects.some(obj => obj.class === 'accident');\n\nif (accidentDetected) {\n    return { payload: \"Accident detected!\" };\n} else {\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1590,
        "y": 180,
        "wires": [
            [
                "14"
            ]
        ]
    },
    {
        "id": "14",
        "type": "http request",
        "z": "bb5635d13d964c64",
        "name": "Report Accident",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://accident-reporting/api/report",
        "tls": "",
        "x": 1860,
        "y": 200,
        "wires": [
            [
                "27"
            ]
        ]
    },
    {
        "id": "16",
        "type": "http request",
        "z": "bb5635d13d964c64",
        "name": "Manage Event Traffic",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://traffic-management/api/manage-event",
        "tls": "",
        "x": 1340,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "17",
        "type": "function",
        "z": "bb5635d13d964c64",
        "name": "Traffic Forecast",
        "func": "let forecast = msg.payload.weather_forecast;\nlet trafficForecast;\n\nif (forecast === 'rainy') {\n    trafficForecast = \"Expect heavy traffic due to rain.\";\n} else {\n    trafficForecast = \"Normal traffic expected.\";\n}\n\nmsg.payload = {\n    trafficForecast: trafficForecast\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2300,
        "y": 100,
        "wires": [
            [
                "10"
            ]
        ]
    },
    {
        "id": "18",
        "type": "http request",
        "z": "bb5635d13d964c64",
        "name": "Adjust Traffic for Forecast",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://traffic-management/api/adjust-forecast",
        "tls": "",
        "x": 2070,
        "y": 120,
        "wires": [
            [
                "17"
            ]
        ]
    },
    {
        "id": "19",
        "type": "function",
        "z": "bb5635d13d964c64",
        "name": "Animal Crossing Alert",
        "func": "let animalType = msg.payload.animal_type;\nlet crossingLocation = msg.payload.crossing_location;\n\nlet alertMessage = `Caution: ${animalType} crossing at ${crossingLocation}!`;\n\nmsg.payload = {\n    alertMessage: alertMessage\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1240,
        "y": 460,
        "wires": [
            [
                "20"
            ]
        ]
    },
    {
        "id": "20",
        "type": "http request",
        "z": "bb5635d13d964c64",
        "name": "Manage Animal Crossing",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://traffic-management/api/manage-animal-crossing",
        "tls": "",
        "x": 1650,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "21",
        "type": "function",
        "z": "bb5635d13d964c64",
        "name": "Emergency Response",
        "func": "let emergencyType = msg.payload.emergency_type;\nlet location = msg.payload.location;\n\nlet responseMessage = `Emergency (${emergencyType}) reported at ${location}. Immediate response required!`;\n\nmsg.payload = {\n    responseMessage: responseMessage\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 900,
        "y": 380,
        "wires": [
            [
                "22"
            ]
        ]
    },
    {
        "id": "22",
        "type": "http request",
        "z": "bb5635d13d964c64",
        "name": "Initiate Emergency Response",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://emergency-services/api/initiate-response",
        "tls": "",
        "x": 1240,
        "y": 420,
        "wires": [
            [
                "23",
                "10"
            ]
        ]
    },
    {
        "id": "23",
        "type": "function",
        "z": "bb5635d13d964c64",
        "name": "Traffic Pattern Analysis",
        "func": "let pattern = msg.payload.traffic_pattern;\nlet alertMessage;\n\nif (pattern === 'congested') {\n    alertMessage = \"Traffic pattern shows congestion. Take necessary actions.\";\n} else {\n    alertMessage = \"Normal traffic pattern.\";\n}\n\nmsg.payload = {\n    alertMessage: alertMessage\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1540,
        "y": 420,
        "wires": [
            [
                "24"
            ]
        ]
    },
    {
        "id": "24",
        "type": "http request",
        "z": "bb5635d13d964c64",
        "name": "Manage Traffic Patterns",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://traffic-management/api/manage-patterns",
        "tls": "",
        "x": 1910,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "25",
        "type": "function",
        "z": "bb5635d13d964c64",
        "name": "Festival Alert",
        "func": "let festivalName = msg.payload.festival_name;\nlet festivalLocation = msg.payload.location;\n\nlet alertMessage = `Attention: ${festivalName} at ${festivalLocation}! Traffic may be affected.`;\n\nmsg.payload = {\n    alertMessage: alertMessage\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1230,
        "y": 600,
        "wires": [
            [
                "26"
            ]
        ]
    },
    {
        "id": "26",
        "type": "http request",
        "z": "bb5635d13d964c64",
        "name": "Manage Festival Traffic",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://traffic-management/api/manage-festival",
        "tls": "",
        "x": 1630,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "27",
        "type": "function",
        "z": "bb5635d13d964c64",
        "name": "Traffic Congestion Alert",
        "func": "let congestionLevel = msg.payload.congestion_level;\nlet alertMessage;\n\nif (congestionLevel === 'high') {\n    alertMessage = \"High traffic congestion detected!\";\n} else if (congestionLevel === 'moderate') {\n    alertMessage = \"Moderate traffic congestion detected.\";\n} else {\n    alertMessage = \"Normal traffic flow.\";\n}\n\nmsg.payload = {\n    alertMessage: alertMessage\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2130,
        "y": 300,
        "wires": [
            [
                "28"
            ]
        ]
    },
    {
        "id": "28",
        "type": "http request",
        "z": "bb5635d13d964c64",
        "name": "Manage Congestion",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://traffic-management/api/manage-congestion",
        "tls": "",
        "x": 2280,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "29",
        "type": "function",
        "z": "bb5635d13d964c64",
        "name": "Road Closure Alert",
        "func": "let closureType = msg.payload.closure_type;\nlet closureLocation = msg.payload.closure_location;\nlet alertMessage = `Road closure (${closureType}) at ${closureLocation}! Plan alternative routes.`;\n\nmsg.payload = {\n    alertMessage: alertMessage\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1210,
        "y": 520,
        "wires": [
            [
                "30"
            ]
        ]
    },
    {
        "id": "30",
        "type": "http request",
        "z": "bb5635d13d964c64",
        "name": "Manage Road Closure",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://traffic-management/api/manage-road-closure",
        "tls": "",
        "x": 1540,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "ad1b32dedbfc6c75",
        "type": "http in",
        "z": "bb5635d13d964c64",
        "name": "Receive Image",
        "url": "/detect-cars",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 340,
        "y": 280,
        "wires": [
            [
                "da3fb695fcc37bb1",
                "206283ea0d453156"
            ]
        ]
    },
    {
        "id": "da3fb695fcc37bb1",
        "type": "function",
        "z": "bb5635d13d964c64",
        "name": "Object Detection",
        "func": "const inputImagePath = msg.req.files[0].path;\n\nconst pythonScript = `\nimport cv2\n# Your TensorFlow-based object detection logic here\n# Example: Load YOLOv5 model and detect cars\n\n# Return detected car bounding boxes\n\ndef detect_cars(image_path):\n    image = cv2.imread(image_path)\n    # Implement car detection logic here\n    return []\n\ncar_detections = detect_cars('${inputImagePath}')\nmsg.payload = car_detections\nreturn msg.payload\n`\n\nreturn {\n    python: pythonScript\n};",
        "outputs": 1,
        "noerr": 0,
        "x": 610,
        "y": 280,
        "wires": [
            [
                "e99c2a46d71f9404",
                "4",
                "2d72737942b95316"
            ]
        ]
    },
    {
        "id": "e99c2a46d71f9404",
        "type": "http response",
        "z": "bb5635d13d964c64",
        "name": "Return Results",
        "statusCode": "",
        "headers": {},
        "x": 640,
        "y": 400,
        "wires": []
    },
    {
        "id": "206283ea0d453156",
        "type": "function",
        "z": "bb5635d13d964c64",
        "name": "Preprocessing Function",
        "func": "msg.payload = {\n    image: msg.req.files[0].buffer\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 500,
        "wires": [
            [
                "da3fb695fcc37bb1"
            ]
        ]
    },
    {
        "id": "2d72737942b95316",
        "type": "function",
        "z": "bb5635d13d964c64",
        "name": "Post-processing Function",
        "func": "msg.payload = {\n    detectedObjects: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 810,
        "y": 220,
        "wires": [
            [
                "4",
                "10046e0523a3d367"
            ]
        ]
    },
    {
        "id": "10046e0523a3d367",
        "type": "http response",
        "z": "bb5635d13d964c64",
        "name": "Send Detection Results",
        "statusCode": "",
        "headers": {},
        "x": 850,
        "y": 100,
        "wires": []
    }
]
